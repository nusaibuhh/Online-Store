# -*- coding: utf-8 -*-
"""Online-store.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P9CXdnDX6fDFZS1AWWYIXdevTNUW9VNw
"""

#Name: Nusaiba Ahmed
#ID: 22201883
#CSE111 section 24




class Product:
  def __init__(self, name, price, quantity):
    self.name = name
    self.price = price
    self.quantity = quantity

  def calculate_price(self):
    return self.price * self.quantity

  def __str__(self):
    return f"{self.name} (${self.price})"

#onlinestoreitem inherits product class

class OnlineStoreItem(Product):
  def __init__(self, name, price, quantity, shipping_weight):
    super().__init__(name, price, quantity)
    self.shipping_weight = shipping_weight

  def calculate_shipping_cost(self):
    return 2.5 * self.shipping_weight

  def __str__(self):
    return f"{super().__str__()}"

#customer class = customer data


class Customer:
  def __init__(self, name, email, address, phone_number):
    self.name = name
    self.email = email
    self.address = address
    self.phone_number = phone_number

  def __str__(self):
    return f"Name: {self.name}\nEmail: {self.email}\nAddress: {self.address}\nPhone: {self.phone_number}"




class Order:
  def __init__(self,customer,products,quan):
    self.customer = customer
    self.products = products
    self.quantity = quan

  def calculate_total(self):
    total_fee = 0
    for i in range(len(self.products)):
      total_fee += self.products[i].price * self.quantity[i]
    return total_fee

  def remove_product(self,product):
    num = self.products.index(product)
    del self.products[num]
    del self.quantity[num]

  def __str__(self):
    info_producc = ''
    for i in range(len(self.products)):
      info_producc += f'\n{self.products[i]} x {self.quantity[i]} x {self.quantity[i]}'
    return f'Order for {self.customer.name}:\nName x Stock x Ordered {info_producc}\nTotal: ${self.calculate_total():.2f}'




class OnlineStore:
  customer_count = 0
  def __init__(self,name="Store"):
    self.name = name
    self.products = {}
    self.customers = []
    self.orders = []

  def add_product(self,product,quan):
    if product in self.products:
      self.products[product] += quan
    else:
      self.products[product] = quan

  def remove_product(self,product,quan):
    if product in self.products:
      if quan >= self.products[product]:
        del self.products[product]
      else:
        self.products[product] -= quan

  def register_customer(self,customer):
    self.customers.append(customer)
    OnlineStore.customer_count += 1

  def place_order(self,customer,products,quan):
    order = Order(customer,products,quan)
    self.orders.append(order)
    for i in range(len(products)):
      self.remove_product(products[i],quan[i])
    return order

  def get_products_info(self):
    product_lines = [f"{prod} x {quan}" for prod, quan in self.products]
    product_text = "\n".join(product_lines)
    return f"Products:\n{product_text}"

  def customers_info(self):
    print(f"Total Customer: {OnlineStore.customer_count}")
    for i in self.customers:
      print(i)


  def __str__(self):
    product_info = ""
    for product in self.products:
        product_info += f"\n{product} x {self.products[product]}"
    customer_info = ""
    for customer in self.customers:
      customer_info += f"\n{customer}"
    return f"Products in stock:{product_info}\n"


# Driver code
# Create some products
product1 = OnlineStoreItem("Apple", 0.5, 0, 0.2)
product2 = Product("Banana", 0.3, 0)
product3 = OnlineStoreItem("Orange", 0.4, 0,
0.3)
# Create an online store
store = OnlineStore()
# Add the products to the store
store.add_product(product1, 100)
store.add_product(product2, 50)
store.add_product(product3, 75)
# View all products in the store
print("1=====================")
print(store)
print("2=====================")
# Create a new customer
customer1 = Customer("Alice","alice@example.com", "123 Main St.","555-1234")
# Register the customer with the store
store.register_customer(customer1)
store.customers_info()
print("3=====================")
# Place an order for the customer
order1 = store.place_order(customer1, [product1,product2], [50, 25])
# View the order
print(order1)
print("4=====================")
# Remove a product from the order
order1.remove_product(product1)
# View the updated order
print(order1)
print("4=====================")